{"version":3,"sources":["pages/About.js","Navbar.js","MainSec.js","Audioplayer.js","App.js","index.js"],"names":["About","useState","setButton","showButton","window","innerWidth","useEffect","addEventListener","className","Navbar","click","setClick","handleClick","href","to","onClick","MainSec","AudioPlayer","props","min","max","title","artist","img_src","src","songs","currentSongIndex","setCurrentSongIndex","setNextSongIndex","length","Math","ceil","floor","random","isPlaying","setIsPlaying","duration","setDuration","currentTime","setCurrentTime","audioPlayer","useRef","progressBar","animationRef","seconds","current","loadedmetadata","readyState","calculateTime","secs","minutes","returnedMinutes","returnedSeconds","play","whilePlaying","value","changePlayerCurrentTime","requestAnimationFrame","changeRange","style","setProperty","SkipSong","forwards","temp","console","log","rel","ref","preload","backSong","prevValue","pause","cancelAnimationFrame","type","defaultValue","onChange","isNaN","App","path","component","ReactDOM","render","document","getElementById"],"mappings":"4TAUe,SAASA,IAEpB,MAA0BC,oBAAS,GAAnC,mBACA,GADA,UAC4BA,oBAAS,IAArC,mBAAeC,GAAf,WAMMC,EAAa,WACbC,OAAOC,YAAc,IACvBH,GAAU,GAEVA,GAAU,IAUd,OANAI,qBAAU,WACRH,MACC,IAEHC,OAAOG,iBAAiB,SAAUJ,GAYpC,cATE,CASF,OAAKK,UAAY,MAAjB,UAEE,qBAAKA,UAAY,cAAjB,oCAIA,qBAAKA,UAAY,eAAjB,mCAGA,qBAAKA,UAAY,eAAjB,mBAIA,qBAAKA,UAAY,eAAjB,uG,oBC6BWC,MA1Ef,WAEI,MAA0BR,oBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAA4BV,oBAAS,GAArC,mBAAeC,GAAf,WAEMU,EAAc,kBAAMD,GAAUD,IAI9BP,EAAa,WACbC,OAAOC,YAAc,IACvBH,GAAU,GAEVA,GAAU,IAUd,OANAI,qBAAU,WACRH,MACC,IAEHC,OAAOG,iBAAiB,SAAUJ,GAG9B,mCACG,sBAAKK,UAAU,SAAf,UAKa,oBAAGK,KAAK,IAAIL,UAAW,UAAvB,cACK,cAAC,IAAD,IADL,YAYA,oBAAIA,UAAWE,EAAQ,kBAAoB,WAA3C,SAEE,sBAAKF,UAAW,WAAhB,UAEA,cAAC,IAAD,CAAMM,GAAK,SAAX,SACA,mBAAGN,UAAWE,EAAQ,QAAU,YAAcK,QAASH,EAAvD,qBAOA,mBAAIJ,UAAYE,EAAQ,eAAiB,aAAcK,QAASH,EAAhE,SACKF,EAAQ,cAAC,IAAD,IAAS,cAAC,IAAD,MAEtB,mBAAGG,KAAK,IAAIL,UAAYE,EAAQ,cAAgB,SAAhD,6C,MClDXM,MAff,WACI,OACI,mCACI,qBAAKR,UAAY,kB,0BCiWdS,MA7Vf,SAAqBC,GAAQ,IAAD,IAuFAC,EAAKC,EArF7B,EAAgBnB,mBAAS,CACrB,CACIoB,MAAO,WACPC,OAAQ,WACRC,QAAS,qBACTC,IAAK,8BAET,CACEH,MAAO,SACPC,OAAQ,oBACRC,QAAS,wBACTC,IAAK,0BAGP,CACAH,MAAO,QACPC,OAAQ,WACRC,QAAS,sBACTC,IAAK,0BAEL,CACAH,MAAO,aACPC,OAAQ,WACRC,QAAS,sBACTC,IAAK,gCAGL,CACAH,MAAO,WACPC,OAAQ,WACRC,QAAS,0BACTC,IAAK,oCAGL,CACAH,MAAO,YACPC,OAAQ,WACRC,QAAS,4BACTC,IAAK,+BAGL,CACAH,MAAO,YACPC,OAAQ,WACRC,QAAS,oBACTC,IAAK,+BAGL,CACAH,MAAO,aACPC,OAAQ,WACRC,QAAS,qBACTC,IAAK,2BAEL,CACAH,MAAO,OACPC,OAAQ,WACRC,QAAS,qBACTC,IAAK,qBAEL,CACAH,MAAO,SACPC,OAAQ,WACRC,QAAS,oBACTC,IAAK,oBAEL,CACAH,MAAO,UACPC,OAAQ,WACRC,QAAS,uBACTC,IAAK,uBAtEFC,EAAP,oBAkFE,EAAgDxB,mBAAS,GAAzD,mBAAOyB,EAAP,KAAyBC,EAAzB,KACA,EAA0C1B,mBAAS,GAAnD,mBAAsB2B,GAAtB,WAEsBT,EAOG,EAPEC,EAOAK,EAAMI,OAAO,EANtCV,EAAMW,KAAKC,KAAKZ,GAChBC,EAAMU,KAAKE,MAAMZ,GACJU,KAAKE,MAAMF,KAAKG,UAAYb,EAAMD,EAAM,GAAKA,GAM5Db,qBAAU,WACRsB,GAAiB,WACf,OAAIF,EAAmB,EAAID,EAAMI,OAAS,EACjC,EAEAH,EAAmB,OAK7B,CAACA,IAKN,MAAkCzB,oBAAS,GAA3C,mBAAOiC,EAAP,KAAkBC,EAAlB,KACA,EAAgClC,mBAAS,GAAzC,mBAAOmC,EAAP,KAAiBC,EAAjB,KACA,EAAsCpC,mBAAS,GAA/C,mBAAOqC,EAAP,KAAoBC,EAApB,KACA,EAAsBtC,mBAAS,GAA/B,mBAGMuC,GAHN,UAGoBC,oBACdC,EAAcD,mBACdE,EAAeF,mBAErBnC,qBAAU,WACN,IAAMsC,EAAUd,KAAKE,MAAMQ,EAAYK,QAAQT,UAC/CC,EAAaO,GACbF,EAAYG,QAAQzB,IAAMwB,IAG3B,QAACJ,QAAD,IAACA,GAAD,UAACA,EAAaK,eAAd,aAAC,EAAsBC,eAAvB,OAAuCN,QAAvC,IAAuCA,GAAvC,UAAuCA,EAAaK,eAApD,aAAuC,EAAsBE,WAAYT,EAAYJ,IAIxF,IAAMc,EAAgB,SAACC,GACnB,IAAMC,EAAUpB,KAAKE,MAAMiB,EAAO,IAC5BE,EAAkBD,EAAU,GAAV,WAAmBA,GAAnB,UAAkCA,GACpDN,EAAUd,KAAKE,MAAMiB,EAAO,IAC5BG,EAAkBR,EAAU,GAAV,WAAmBA,GAAnB,UAAkCA,GAC1D,MAAM,GAAN,OAAUO,EAAV,YAA6BC,IAiBjC9C,qBAAU,WACkB,IAArBoB,GAA0C,IAAhBY,GACzBE,EAAYK,QAAQQ,OACpBlB,GAAa,KAGbK,EAAYK,QAAQQ,OACpBlB,GAAa,MAEd,CAACC,IAGR,IAcEkB,EAAe,SAAfA,IACFZ,EAAYG,QAAQU,MAAQf,EAAYK,QAAQP,YAChDkB,IACAb,EAAaE,QAAUY,sBAAsBH,IAG3CI,EAAc,WAChBlB,EAAYK,QAAQP,YAAcI,EAAYG,QAAQU,MACtDC,KAGEA,EAA0B,WAC5Bd,EAAYG,QAAQc,MAAMC,YAAY,sBAAtC,UAAgElB,EAAYG,QAAQU,MAAQnB,EAAW,IAAvG,MACAG,EAAeG,EAAYG,QAAQU,QAejCM,EAAW,WAAsB,IAArBC,IAAoB,yDAE9BnC,EADAmC,EACoB,WAChB,IAAIC,EAAOrC,EAMX,QALAqC,EAEWtC,EAAMI,OAAS,IACtBkC,EAAO,GAEJA,GAGS,WAChB,IAAIA,EAAOrC,EAOX,QANAqC,EAEW,IACPA,EAAOtC,EAAMI,OAAS,GAGnBkC,KAuEf,OA5BJzD,qBAAU,WACD0C,EAAcV,KAAiBU,EAAcZ,IAC9C4B,QAAQC,IAAI,SACZJ,GAAS,IAETG,QAAQC,IAAI,WAGjB,CAAC3B,IAsBI,cADA,CACA,OAAK9B,UAAY,cAAjB,UACI,cAAC,IAAD,CAAMK,KAAO,sHAAsHqD,IAAM,eACzI,uBAAO1C,IAAOC,EAAMC,GAAkBF,IAAK2C,IAAO3B,EAAa4B,QAAU,WAAzE,kGAKA,qBAAK5D,UAAW,YAAYgB,IAAOC,EAAMC,GAAkBH,UAG3D,sBAAKf,UAAY,mBAAjB,0BACciB,EAAMC,GAAkBL,SAKtC,wBAAQb,UAAY,kBAAkBO,QAAW,YApF5C,WAETY,EAF+B,yDAYX,WAChB,IAAIoC,EAAOrC,EAOX,QANAqC,EAEW,IACPA,EAAOtC,EAAMI,OAAS,GAGnBkC,GAlBS,WAChB,IAAIA,EAAOrC,EAMX,QALAqC,EAEW,IACPA,EAAOtC,EAAMI,OAAO,GAEjBkC,IA2EiDM,GAAYlC,GAAa,IAAjF,SACA,cAAC,IAAD,MAIA,wBAAQpB,QA5JQ,WACpB,IAAMuD,EAAYpC,EAClBC,GAAcmC,GAETA,GAKD9B,EAAYK,QAAQ0B,QACpBC,qBAAqB7B,EAAaE,WALlCL,EAAYK,QAAQQ,OACpBV,EAAaE,QAAUY,sBAAsBH,KAsJV9C,UAAY,YAA/C,SACE0B,EAAY,cAAC,IAAD,CAAa1B,UAAY,UAAY,cAAC,IAAD,CAAYA,UAAY,WAI3E,wBAAQA,UAAY,kBAAkBO,QAAW,WAAO8C,IAAY1B,GAAa,IAAjF,SACI,cAAC,IAAD,MAGJ,qBAAK3B,UAAY,cAAjB,SACCwC,EAAcV,KAGf,8BACI,uBAAOmC,KAAO,QAAQjE,UAAY,cAAckE,aAAe,IAAIP,IAAOzB,EAAaiC,SAAYjB,MAGvG,qBAAKlD,UAAY,WAAjB,SACE4B,IAAawC,MAAMxC,IAAcY,EAAcZ,SC1T9CyC,MAvBf,WACE,OACE,mCACE,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAM,MACb,cAAC,IAAD,CAAOA,KAAM,SAASC,UAAa/E,IAEjC,cAAC,EAAD,IACJ,cAAC,EAAD,IACA,cAAC,EAAD,IAII,4BCrBZgF,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2496a5f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import AudioPlayer from '../Audioplayer'\r\n// import '../Audioplayer.css';\r\nimport Navbar from '../Navbar';\r\nimport './About.css'\r\nimport Footer from '../Footer';\r\nimport App from '../App'\r\n\r\n\r\n\r\nexport default function About() {    \r\n\r\n    const [click, setClick] = useState(false);\r\n    const [button, setButton] = useState(true);\r\n\r\n    const handleClick = () => setClick(!click);\r\n    const closeMobileMenu = () => setClick(false);\r\n    \r\n   \r\n    const showButton = () => {\r\n      if (window.innerWidth <= 960) {\r\n        setButton(false);\r\n      } else {\r\n        setButton(true);\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      showButton();\r\n    }, []);\r\n  \r\n    window.addEventListener('resize', showButton);\r\n\r\n    return(\r\n    // <nav> \r\n    //     <h1 className = 'beatpage'></h1>\r\n    //     {/* <a href='http://localhost:3000/' className= 'whitetlname2' >\r\n    //         MAA Beats  \r\n    //     </a> */}\r\n\r\n    //     <h1/>\r\n        \r\n\r\n  <div className = \"box\">\r\n    \r\n    <div className = \"starterText\">\r\n   Updates/Content Weekly\r\n    </div>\r\n\r\n    <div className = \"starterText2\">\r\n    Dm comments/inquiries\r\n    </div>\r\n    <div className = \"starterText3\">\r\n    Enjoy\r\n    </div>\r\n\r\n    <div className = \"starterText4\">\r\n    11 songs and 30:10 Minutes of freestyle, press play once and it'll run through 'em all\r\n    </div>\r\n\r\n    </div> \r\n    \r\n   \r\n\r\n\r\n    );\r\n    \r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './Navbar.css';\r\nimport About from './pages/About'\r\n\r\nimport { GiLion } from \"react-icons/gi\";\r\nimport { GiHamburgerMenu } from 'react-icons/gi';\r\nimport { GoX } from 'react-icons/go';\r\n\r\n\r\n\r\nfunction Navbar() {\r\n  \r\n    const [click, setClick] = useState(false);\r\n    const [button, setButton] = useState(true);\r\n\r\n    const handleClick = () => setClick(!click);\r\n    const closeMobileMenu = () => setClick(false);\r\n    \r\n   \r\n    const showButton = () => {\r\n      if (window.innerWidth <= 960) {\r\n        setButton(false);\r\n      } else {\r\n        setButton(true);\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      showButton();\r\n    }, []);\r\n  \r\n    window.addEventListener('resize', showButton);\r\n\r\n    return (\r\n        <>\r\n           <nav className='navbar'> \r\n                \r\n                        {/* <a href='http://localhost:3000/' className= {click ? 'whitetlname' : 'tlname'} >\r\n                         MAA Beats  \r\n                        </a> */}\r\n                        <a href='/' className= 'logopic' >\r\n                            \"<GiLion/> Logo\"\r\n                        </a>\r\n\r\n                        {/* <a className ={click ? 'BurgerChange' : 'BurgerMenu'} onClick={handleClick} >\r\n                             { click ? <GoX/> : <GiHamburgerMenu/> }\r\n                        </a> */}\r\n\r\n                          {/* <a className='menu-icon' onClick={handleClick}>\r\n                          <i className={click ? 'BurgerMenu' : 'BurgerChange' } />\r\n                          </a> */}\r\n\r\n                        <h1 className={click ? 'nav-menu active' : 'nav-menu'}>\r\n                          \r\n                          <div className= 'nav-item'>\r\n                          \r\n                          <Link to = \"/about\">\r\n                          <a className={click ? 'Beats' : 'Not-Beats' } onClick={handleClick} >\r\n                              About \r\n                          </a>\r\n                          </Link>\r\n                            {/* <a href = 'http://localhost:3000/pricing' className={click ? 'Pricing' : 'Not-Pricing' } onClick={handleClick}>\r\n                              Pricing  \r\n                            </a> */}\r\n                          <a  className ={click ? 'BurgerChange' : 'BurgerMenu'} onClick={handleClick} >\r\n                             { click ? <GoX/> : <GiHamburgerMenu/> }\r\n                          </a>\r\n                          <a href='/' className= {click ? 'whitetlname' : 'tlname'} >\r\n                         \"Producer Name Here\"  \r\n                          </a>\r\n                          </div>  \r\n                        </h1>\r\n                        {/* <div className = 'hamburger' onClick={handleClick}>\r\n                            <i className = {click ? 'fas fa-times' : 'fas fa-bars'} \r\n                            />\r\n                        </div> */}\r\n                  \r\n            </nav> \r\n        </>\r\n      );\r\n\r\n   \r\n}\r\n\r\nexport default Navbar;\r\n\r\n\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport './MainSec.css';  \r\n\r\nfunction MainSec () {\r\n    return (\r\n        <>\r\n            <div className = 'backsplash'>\r\n                    {/* <img \r\n                    className = 'purplebeach'\r\n                    src = 'images/purplebeach.jpg' \r\n                    alt='purplebeach'>\r\n                    </img> */}\r\n            </div>\r\n        </>\r\n    );\r\n\r\n}\r\n\r\nexport default MainSec;\r\n","import React, {useState, useRef, useEffect, useMemo} from 'react'\r\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\r\n\r\nimport './Audioplayer.css';\r\nimport {IoMdSkipBackward} from 'react-icons/io'\r\nimport {IoMdSkipForward} from 'react-icons/io'\r\nimport {GrPlayFill} from 'react-icons/gr'\r\nimport {GrPauseFill} from 'react-icons/gr'\r\n\r\n\r\nfunction AudioPlayer(props) {\r\n    \r\n    const [songs] = useState([\r\n        {\r\n            title: \"The Funk\",\r\n            artist: \"2 chainz\",\r\n            img_src: \"../images/fire.jpg\",\r\n            src: \"../beats/the funk prod.mp3\",\r\n        },\r\n        {\r\n          title: \"Mimosa\",  \r\n          artist: \"Machine Gun Kelly\",\r\n          img_src: \"../images/mimosa.jfif\",\r\n          src: \"../beats/hornsprod.mp3\",\r\n            //index loaded into site initially\r\n        },\r\n        {\r\n        title: \"Orbit\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/orbit.jpg\",\r\n        src: \"../beats/orbitprod.mp3\",\r\n        },\r\n        {\r\n        title: \"Trapavelli\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/ig88.jfif\",\r\n        src: \"../beats/trapavelliprod1.mp3\",\r\n        }\r\n        ,\r\n        {\r\n        title: \"Halftime\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/halftime.jfif\",\r\n        src: \"../beats/halftime Kyrie Prod.mp3\",\r\n        }\r\n        ,\r\n        {\r\n        title: \"Let it Go\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/purplebeach.jpg\",\r\n        src: \"../beats/let it go prod.mp3\",\r\n        }\r\n        ,\r\n        {\r\n        title: \"Delta Ave\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/hoh.jpg\",\r\n        src: \"../beats/delta ave prod.mp3\",\r\n        }\r\n        ,\r\n        {\r\n        title: \"Riding out\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/kfc.jfif\",\r\n        src: \"../beats/Riding out.mp3\",\r\n        }        ,\r\n        {\r\n        title: \"Rako\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/rako.jpg\",\r\n        src: \"../beats/Rako.mp3\",\r\n        }        ,\r\n        {\r\n        title: \"Get it\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/get.jpg\",\r\n        src: \"../beats/Get.mp3\",\r\n        }        ,\r\n        {\r\n        title: \"42 Dugg\",\r\n        artist: \"2 chainz\",\r\n        img_src: \"../images/piano.jfif\",\r\n        src: \"../beats/dugg.mp3\",\r\n        }\r\n    ]);\r\n    // const shuffle = (arr) => {\r\n    //     for (let i = songs.length - 1; i > 0; i--) {\r\n    //         const j = Math.floor(Math.random() * (i + 1));\r\n    //         [songs[i], songs[j]] = [songs[j], songs[i]];\r\n    //       }\r\n    // };\r\n\r\n\r\n    \r\n      const [currentSongIndex, setCurrentSongIndex] = useState(0);\r\n      const [nextSongIndex, setNextSongIndex] = useState(0);\r\n    \r\n      function getRandomInt(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        let result = Math.floor(Math.random() * (max - min + 1) + min); //The maximum and min are inclusive\r\n        return result\r\n      }\r\n    \r\n    let randint = getRandomInt(0,songs.length-1);\r\n      \r\n      useEffect(() => { \r\n        setNextSongIndex(() => {\r\n          if (currentSongIndex + 1 > songs.length - 1) {\r\n            return 0;\r\n          } else {\r\n            return currentSongIndex + 1;   \r\n            //currentSongIndex = getRandomInt(0,songs.length) \r\n              // return currentSongIndex;\r\n            }    \r\n        });\r\n      }, [currentSongIndex]);\r\n\r\n\r\n    //state\r\n\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const [duration, setDuration] = useState(0);\r\n    const [currentTime, setCurrentTime] = useState(0);\r\n    const [end, setEnd] = useState(0);\r\n    \r\n    //references\r\n    const audioPlayer = useRef(); //reference our audio component\r\n    const progressBar = useRef(); //reference to our slider\r\n    const animationRef = useRef(); //references animation of slider\r\n    \r\n    useEffect(() => { //takes a function as its first parameter, array as second parameter function is what we want it to do\r\n        const seconds = Math.floor(audioPlayer.current.duration);\r\n        setDuration (seconds); //coming from variable set 1 line above ^\r\n        progressBar.current.max = seconds;\r\n        \r\n          //current is referencing current item in our reference, max is a built in property on our input range\r\n    }, [audioPlayer?.current?.loadedmetadata, audioPlayer?.current?.readyState, currentTime,isPlaying]); //array tells us when it wants us to run use effect if we dont use this \r\n    //it will run every single time component refreshes, empty array only runs once.  seems like once, but problem is audio file may have not loaded\r\n    //audioplayer exists, current exists updated when loadedmetadata is available, do same with readystate tells us when its loaded as well \r\n\r\n    const calculateTime = (secs) => {\r\n        const minutes = Math.floor(secs / 60);\r\n        const returnedMinutes = minutes < 10 ? `0${minutes}` : `${minutes}`;\r\n        const seconds = Math.floor(secs % 60);\r\n        const returnedSeconds = seconds < 10 ? `0${seconds}` : `${seconds}`;\r\n        return `${returnedMinutes}:${returnedSeconds}`;\r\n      }\r\n\r\n    // const maxTime = (end) => {\r\n    //     const playTime = end;\r\n    //     return (playTime);\r\n    // }  \r\n    // const endSlider = (duration) => {\r\n    //     if(duration === Number(audioPlayer.current.currentTime)) {\r\n    //         return SkipSong;\r\n    //     }\r\n    //     else {\r\n    //         return (false);\r\n    //     }\r\n    // }\r\n\r\n\r\n    useEffect(() => {\r\n        if(currentSongIndex === 1 && currentTime === 0){\r\n            audioPlayer.current.play();\r\n            setIsPlaying(false);\r\n        }\r\n        else { \r\n            audioPlayer.current.play();\r\n            setIsPlaying(true);\r\n        }\r\n        }, [duration]); // for going to next song after duration changes\r\n\r\n\r\n    const togglePlayPause = () => {\r\n        const prevValue = isPlaying; //grabs state outside so that play button doesn't break from useffect being asyncronous\r\n        setIsPlaying(!prevValue);\r\n\r\n        if (!prevValue) {\r\n            audioPlayer.current.play();\r\n            animationRef.current = requestAnimationFrame(whilePlaying)\r\n        }\r\n        else {\r\n            audioPlayer.current.pause(); \r\n            cancelAnimationFrame(animationRef.current);\r\n        }   \r\n}\r\n\r\nconst whilePlaying = () => { //these two functions could be abstracted but first line different\r\n    progressBar.current.value = audioPlayer.current.currentTime;\r\n    changePlayerCurrentTime();\r\n    animationRef.current = requestAnimationFrame(whilePlaying);\r\n}\r\n\r\nconst changeRange = () => {\r\n    audioPlayer.current.currentTime = progressBar.current.value;\r\n    changePlayerCurrentTime();\r\n}\r\n\r\nconst changePlayerCurrentTime = () => {\r\n    progressBar.current.style.setProperty('--seek-before-width', `${progressBar.current.value / duration * 100}%`)\r\n    setCurrentTime(progressBar.current.value);\r\n}\r\n\r\nconst backButton = () => {\r\n    progressBar.current.value = Number(progressBar.current.value - 15);\r\n    changeRange();\r\n}\r\n\r\nconst forwardButton = () => {\r\n    progressBar.current.value = Number(progressBar.current.max); \r\n    changeRange();\r\n    \r\n}\r\n//Insert songs and set them up for skipping function:\r\n\r\nconst SkipSong = (forwards = true) => {\r\n    if (forwards) {\r\n        setCurrentSongIndex(() => {\r\n            let temp = currentSongIndex\r\n            temp++;\r\n\r\n            if (temp > songs.length - 1) {\r\n                temp = 0;\r\n            }\r\n            return temp;\r\n        });\r\n    } else {\r\n        setCurrentSongIndex(() => {\r\n            let temp = currentSongIndex;\r\n            temp--;\r\n\r\n            if (temp < 0) {\r\n                temp = songs.length - 1;\r\n            }\r\n\r\n            return temp;\r\n        });\r\n    }\r\n}\r\n\r\nconst backSong = (backwards = true) => {\r\n    if (backwards) {\r\n        setCurrentSongIndex(() => {\r\n            let temp = currentSongIndex\r\n            temp--;\r\n\r\n            if (temp < 0) {\r\n                temp = songs.length-1;\r\n            }\r\n            return temp;\r\n        });\r\n    } else {\r\n        setCurrentSongIndex(() => {\r\n            let temp = currentSongIndex;\r\n            temp++;\r\n\r\n            if (temp < 0) {\r\n                temp = songs.length - 1;\r\n            }\r\n\r\n            return temp;\r\n        });\r\n    }\r\n}\r\nconst delay = ms => new Promise(res => setTimeout(res, ms));\r\n\r\n// const autoPlay = async (letsgo = true) => {\r\n//     if (letsgo) {\r\n//         console.log('uhaveaids')\r\n//         await delay(1000);\r\n//          togglePlayPause(); togglePlayPause(); togglePlayPause();\r\n//     }\r\n//     else {\r\n//         return;\r\n//     }\r\n// }\r\n\r\n\r\nuseEffect(() => { //takes a function as its first parameter, array as second parameter function is what we want it to do\r\n    if ( calculateTime(currentTime) === calculateTime(duration)) {\r\n        console.log('ebola');\r\n        SkipSong(true);  \r\n    } else {\r\n        console.log('penis');\r\n    }\r\n   //current is referencing current item in our reference, max is a built in property on our input range\r\n}, [currentTime]);\r\n\r\n\r\n\r\n// useEffect(() => {\r\n//     if ( calculateTime(currentTime) === calculateTime(duration)) {\r\n//         console.log('chronski')\r\n//         autoPlay(true);\r\n//     }\r\n//     else {\r\n//         console.log('ovalemano');\r\n//     }  \r\n// }, [currentSongIndex]);    \r\n\r\n\r\n\r\n// const musicSelector = () => {\r\n//     var Answer = props => \r\n//     <select>{props.data.map((x,y) => <option key={y}>{x}</option>)}</select>;\r\n// } \r\n    return (\r\n        //working below this line\r\n        <div className = \"Audioplayer\">\r\n            <Link href = 'https://cdn.rawgit.com/mfd/f3d96ec7f0e8f034cc22ea73b3797b59/raw/856f1dbb8d807aabceb80b6d4f94b464df461b3e/gotham.css' rel = \"sytlesheet\" />\r\n            <audio src = {songs[currentSongIndex].src} ref = {audioPlayer} preload = \"metadata\" >\r\n            //'../beats/trapavelliprod.mp3'\r\n            console.log(props.songs[props.currentSongIndex].src)\r\n            </audio>\r\n\r\n            <img className =\"songPhoto\" src = {songs[currentSongIndex].img_src} >\r\n            </img>   \r\n\r\n            <div className = \"currentlyPlaying\" >\r\n            Now Playing: {songs[currentSongIndex].title}\r\n            </div>\r\n\r\n\r\n\r\n            <button className = \"forwardbackward\" onClick = {()=> { backSong(); setIsPlaying(true); }} > \r\n            <IoMdSkipBackward/>  \r\n            \r\n            </button>\r\n            \r\n            <button onClick ={togglePlayPause} className = \"playpause\"  > \r\n            { isPlaying?  <GrPauseFill className = \"pause\"/> : <GrPlayFill className = \"play\"/> } \r\n            \r\n            </button>\r\n\r\n            <button className = \"forwardbackward\" onClick = {()=> { SkipSong(); setIsPlaying(true) }}  > \r\n                <IoMdSkipForward/>\r\n            </button> \r\n            \r\n            <div className = \"currenttime\" > \r\n            {calculateTime(currentTime)} \r\n            </div>\r\n\r\n            <div> \r\n                <input type = \"range\" className = \"progressbar\" defaultValue = \"0\" ref = {progressBar} onChange = {changeRange} />\r\n            </div>\r\n\r\n            <div className = \"duration\" > \r\n            {(duration && !isNaN(duration)) && calculateTime(duration)}\r\n            \r\n            </div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default AudioPlayer;\r\n","import React from 'react';\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Navbar from './Navbar';\nimport MainSec from './MainSec';\nimport About from './pages/About'\nimport Pricing from './pages/Pricing' \nimport Footer from './Footer'\nimport AudioPlayer from './Audioplayer'\n\n\nfunction App() {\n  return (\n    <>\n      <Router>\n          <Route path =\"/\" />   \n          <Route path ='/about' component = {About} />\n          {/* <Route path='/pricing' component = {Pricing} /> */}\n            <Navbar />\n        <MainSec />\n        <AudioPlayer />\n\n        {/* <Footer />     */}\n            \n            <a>\n            \n            </a> \n\n\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}